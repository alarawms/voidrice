#!/bin/bash

## Requires dwmcfg script

# The 2 below functions are for arithmetic purposes
function checkNremoveZERO {
    if [[ $1 -lt 10 ]];
    then
        tmpVAR0=$(echo $1 | sed -r 's/0//g')
        echo $tmpVAR0
    else
        echo $1
    fi
}

function checkNaddZERO {
    if [[ $1 -lt 10 ]];
    then
        tmpVAR1+="0$1"
        echo $tmpVAR1
    else
        echo $1
    fi
}

set -e

todayDATE=$(checkNremoveZERO $(date +%D))
todayDAY=$(checkNremoveZERO $(date +%d))
todayMONTH=$(checkNremoveZERO $(date +%m))
todayYEAR=$(checkNremoveZERO $(date +%y))
todayHOUR=$(checkNremoveZERO $(date +%H))
todayMIN=$(checkNremoveZERO $(date +%M))
extraDAY=0

premadeHOUR=( 1 2 6 12 18 )
for hour in "${premadeHOUR[@]}";
do
    hourSTR+="$hour Hour(s) from now\n"
done
echo $hourSTR

premadeDAY=( 1 2 3 4 5 9 27 )
for day in "${premadeDAY[@]}";
do
    daySTR+="$day Day(s) from now\n"
done
echo $daySTR

# DpreCONF String and task path
DpreCONF=$(bash dwmcfg dmenucolor)
DpreCONFsb=$(bash dwmcfg tdmenu sb)

# Unfinished tasks path
taskPATH="$HOME/.tasks"

# Finished tasks path
ftasksPATH="$HOME/.ftasks"

function checkFILE {
    if [ ! -f $taskPATH ];
    then
        MTselCHOICE=$(echo "Create New Task" | $DpreCONF -l 1 -p "0-tasks")
        touch $taskPATH
        if [[ $MTselCHOICE = "Create New Task" ]];
        then
            createTASK
        fi
    else
        initMENU
    fi;
}

function taskDATEf {
    taskDAY="false"
    globalDAY=0
    globalMONTH=0
    globalYEAR=0
    while [[ $taskDAY = "false" ]];
    do
        taskDAY=$(echo -e "$daySTR""Input date DD/MM/YY e.g. 04/05/14" | $DpreCONFsb -sb "#5e81ac" -l 10 -p "Task Date")
        for days in ${premadeDAY[@]};
        do
            if [[ $taskDAY = *"Day(s) from now"* ]];
            then
                echo "in if1"
                if [[ $taskDAY = "$days Day(s) from now" ]];
                then
                    echo "in if2 //  days  $days"
                    accurateDAY=$(($todayDAY+$days+$extraDAY))
                    daysPlusExtraDAY=$(checkNremoveZERO $accurateDAY)
                    echo "accurateday: $accurateDAY // d+xtra: $daysPlusExtraDAY // taskDAY: $taskDAY"
                    if [[ $todayMONTH == 2 && $daysPlusExtraDAY -gt 28 ]];
                    then
                        echo "FEB" $todayMONTH $days
                        globalDAY=$(($todayDAY+$days+$extraDAY-28))
                        globalMONTH=$(($todayMONTH+1))
                        globalYEAR=$todayYEAR
                        taskDAY="$globalDAY/$globalMONTH/$globalYEAR"
                        break
                    elif [[ $(($todayMONTH%2)) == 1 && $daysPlusExtraDAY -gt 30 ]];
                    then
                        echo "EVEN" $todayMONTH $days
                        globalDAY=$(($todayDAY+$days+$extraDAY-30))
                        globalMONTH=$(($todayMONTH+1))
                        globalYEAR=$todayYEAR
                        taskDAY="$globalDAY/$globalMONTH/$globalYEAR"
                        break
                    elif [[ $daysPlusExtraDAY -gt 31 ]];
                    then
                        echo "ODD" $todayMONTH $days
                        globalDAY=$(($todayDAY+$days+$extraDAY-31))
                        globalMONTH=$(($todayMONTH+1))
                        globalYEAR=$todayYEAR
                        taskDAY="$globalDAY/$globalMONTH/$globalYEAR"
                        break
                    else
                        echo "ELSE3"
                        globalDAY=$(($todayDAY+$days+$extraDAY))
                        globalMONTH=$(($todayMONTH))
                        globalYEAR=$todayYEAR
                        taskDAY="$globalDAY/$globalMONTH/$globalYEAR"
                        break
                    fi
                fi
            else
                echo "ELSE1"
                dayVAR=$(echo $taskDAY   | sed -r 's|/.*$||g')
                monthVAR=$(echo "$taskDAY" | awk -F'/' '{print $2}' )
                # monthVAR=$(echo $taskDAY | sed -Ee 's|.*/(..)/.*|\1|g')
                yearVAR=$(echo $taskDAY  | sed -r 's|.*/||g')
                dayVAR=$(checkNremoveZERO $dayVAR)
                monthVAR=$(checkNremoveZERO $monthVAR)
                yearVAR=$(checkNremoveZERO $yearVAR)
                echo $monthVAR
                break
            fi
        done

        if [[ -n ${dayVAR+x} && -n ${dayVAR+x} && -n ${dayVAR+x} ]];
        then
            echo "Declared"
            if [[ $yearVAR -lt $todayYEAR || $yearVAR -gt 99 ]];
            then
                echo "lt todayYEAR || gt 99"
                taskDAY="false"
            elif [[ $yearVAR == $todayYEAR ]];
            then
                echo "yearVAR == todayYEAR"
                isThisYEAR=1
            elif [[ ( $isthisYEAR == 1 && $monthVAR -lt $todayMONTH ) || $monthVAR -gt 12 ]];
            then
                echo "its this year && montvar is less than todaysmonth or monthvar is greater than 12"
                taskDAY="false"
            elif [[ $monthVAR == $todayMONTH ]];
            then
                echo "monthVAR == todayMONTH"
                isThisMONTH=1
            elif [[ $isthisMONTH == 1 && $dayVAR -lt $todayDAY ]];
            then
                echo "its this motnh and dayvar is lower than todayday"
                taskDAY="false"
            elif [[ ( $monthVAR == 2 && $dayVAR -gt 28 ) || ( $(($monthVAR%2)) == 1 && $dayVAR -gt 30 ) || $dayVAR -gt 31 ]];
            then
                echo "its FEB or its an even days month or odd"
                taskDAY="false"
            elif [[ $dayVAR == $todayDAY ]];
            then
                echo "its todaay"
                isThisDAY=1
            elif [[ $isThisDAY == 1 && $hourVAR -lt $todayHOUR ]];
            then
                echo "its today and hourvar is lt todayshour"
                taskHOURf
            elif [[ $hourVAR == $todayHOUR ]];
            then
                echo "its this hour"
                isThisHOUR=1
            elif [[ $isThisHOUR == 1 && $minVAR -lt $todayMIN ]];
            then
                echo "its this hour and the minutes are less than rn mins"
                taskHOURf
            fi
        fi
    done;
}

function taskHOURf {
    globalHOUR=0
    globalMIN=0
    taskHOUR="false"
    while [[ $taskHOUR = "false" ]];
    do
        taskHOUR=$(echo -e "$hourSTR""Input hour e.g. 19:20" | $DpreCONFsb -sb "#903749" -l 10 -p "Task Hour")
        for hours in ${premadeHOUR[@]};
        do
            echo "hours" $hours
            if [[ $taskHOUR = *"Hour(s) from now"* ]];
            then
                if [[ $taskHOUR = "$hours Hour(s) from now" ]];
                then
                    echo $(($todayHOUR+$hours))
                    if [[ $(($todayHOUR+$hours)) -gt 23 ]];
                    then
                        echo "greater than 23:" $taskHOUR
                        extraDAY=1
                        globalHOUR=$(($todayHOUR+$hours-24))
                        globalMIN=$todayMIN
                        taskHOUR="$globalHOUR:$globalMIN"
                        break
                    else
                        echo "less than 23:" "h" $hours "taskHOUR" $taskHOUR
                        globalHOUR=$(($todayHOUR+$hours))
                        globalMIN=$todayMIN
                        taskHOUR="$globalHOUR:$globalMIN"
                        break
                    fi
                fi
            else
                hourVAR=$(echo $taskHOUR | sed -r 's/:.*$//g')
                minVAR=$(echo $taskHOUR | sed -r 's/.*://g')
            fi
        done
        if [[ -n ${hourVAR+x} && -n ${minVAR+x} ]];
        then
            if [[ $hourVAR -gt 23 || $minVAR -gt 59 ]];
            then
                taskHOUR="false"
            else
                globalHOUR=$hourVAR
                globalMIN=$minVAR
                taskHOUR="$hourVAR:$minVAR"
            fi
        fi
    done;
}

function createTASK {
    echo "createTASK1"
    # function to create tasks
    taskTITLE=$(cat /dev/null | $DpreCONFsb -sb "#d08770" -p "Task Title" )
    echo "createTASK2"
    taskDESCRIPTION=$(cat /dev/null | $DpreCONFsb -sb "#536878" -p "Task Description" )
    echo "createTASK3"
    taskHOURf
    echo "createTASK4"
    taskDATEf
    echo "createTASK5"
    echo "$taskTITLE|$taskDESCRIPTION|$taskHOUR|$taskDAY" >> $taskPATH
    echo "createTASK6"
}

function initMENU {
    # Menu when initialized
    selCHOICE=$(echo -e "Create New Task\nList Tasks" | $DpreCONF -l 2 -p "Start Menu")
    case $selCHOICE in
        "");;
        "Create New Task")
            createTASK;;
        "List Tasks")
            bash wmenu list;;
    esac;
}

case $1 in
    "")
        checkFILE;;
    create)
        createTASK;;
    menu)
        initMENU;;
esac

# Use cases
# If 0 tasks, prompt to create a new task
# TODO
# stop hour and day from going over Today
# if month == 2
# taskDay == false
# else if $(($month%2)) == 0
# taskDay == false
# else if $month -gt ......

# line 104-140 not working properly
# test the dates and hours, mainly the dates
# REMOVE 0'S FROM DAYS/MONTHS/YEAR/HOURS/MINUTES IF THEYRE OF VALUE UNDER 10
# REMOVE 0'S FROM DAYS/MONTHS/YEAR/HOURS/MINUTES IF THEYRE OF VALUE UNDER 10
# REMOVE 0'S FROM DAYS/MONTHS/YEAR/HOURS/MINUTES IF THEYRE OF VALUE UNDER 10
# REMOVE 0'S FROM DAYS/MONTHS/YEAR/HOURS/MINUTES IF THEYRE OF VALUE UNDER 10
# REMOVE 0'S FROM DAYS/MONTHS/YEAR/HOURS/MINUTES IF THEYRE OF VALUE UNDER 10
# REMOVE 0'S FROM DAYS/MONTHS/YEAR/HOURS/MINUTES IF THEYRE OF VALUE UNDER 10
# REMOVE 0'S FROM DAYS/MONTHS/YEAR/HOURS/MINUTES IF THEYRE OF VALUE UNDER 10
# REMOVE 0'S FROM DAYS/MONTHS/YEAR/HOURS/MINUTES IF THEYRE OF VALUE UNDER 10
# REMOVE 0'S FROM DAYS/MONTHS/YEAR/HOURS/MINUTES IF THEYRE OF VALUE UNDER 10
# REMOVE 0'S FROM DAYS/MONTHS/YEAR/HOURS/MINUTES IF THEYRE OF VALUE UNDER 10
# REMOVE 0'S FROM DAYS/MONTHS/YEAR/HOURS/MINUTES IF THEYRE OF VALUE UNDER 10
# REMOVE 0'S FROM DAYS/MONTHS/YEAR/HOURS/MINUTES IF THEYRE OF VALUE UNDER 10
