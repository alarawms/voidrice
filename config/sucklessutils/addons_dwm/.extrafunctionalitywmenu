#!/bin/bash

## Requires dwmcfg script(for dmenu themeing)

set -e

### 3-# mark the variables that can be modified

# DpreCONF String and task path
# Modify if not using the dwmcfg script:
DpreCONF=$(bash dwmcfg dmenucolor)
DpreCONFsb=$(bash dwmcfg tdmenu sb)

# Unfinished tasks path:
taskPATH="$HOME/files/.tasks"

# Finished tasks path:
ftaskPATH="$HOME/files/.ftasks"

# Set createTASK function colors:
colors=( "#d08770" "#536878" "#903749" "#5e81ac" )

# Easy way to set the task 1/2/3/4/5/.. hours from now
premadeHOUR=( 1 2 3 6 12 )
# Do not change:
for hour in "${premadeHOUR[@]}";
do
    hourSTR+="$hour Hour(s) from now\n"
done

# Easy way to set the task 1/2/3/4/5/../MAX:53 days from now:
premadeDAY=( 1 2 3 4 5 10 30 )
# Do not change:
for day in "${premadeDAY[@]}";
do
    daySTR+="$day Day(s) from now\n"
done

###

# The 2 below functions are for arithmetic purposes
function checkNremoveZERO {
    if [ $1 -ge 10 ];
    then
        echo $1
    else
        tmpVAR0=$(echo $1 | sed -r 's/0//g')
        echo $tmpVAR0
    fi
}

function checkNaddZERO {
    if [ $1 -ge 10 ];
    then
        echo $1
    else
        tmpVAR1+="0$1"
        echo $tmpVAR1
    fi
}

# Get today's date and hour in proper format
todayDAY=$(date +%_d)
todayMONTH=$(date +%_m)
todayYEAR=$(date +%_y)
todayHOUR=$(date +%_H)
todayMIN=$(date +%_M)
extraDAYS=0

function checkFILE {
    if [ ! -f $ftaskPATH ];
    then
        touch $ftaskPATH
    fi
    if [ ! -f $taskPATH ];
    then
        MTselCHOICE=$(echo "Create New Task" | $DpreCONF -l 1 -p "0-tasks")
        touch $taskPATH
        if [[ $MTselCHOICE = "Create New Task" ]];
        then
            createTASK
        fi
    else
        initMENU
    fi;
}

function taskDATEf {
    taskDAY="false"
    while [[ $taskDAY = "false" ]];
    do
        taskDAY=$(echo -e "Today\n${daySTR}Input date DD/MM/YY e.g. 4/5/14" | $DpreCONFsb -sb ${colors[3]} -l 10 -p "Task Date")
        for days in ${premadeDAY[@]};
        do
            if [[ $taskDAY = "Today" ]];
            then
                globalDAY=$(date -d "+${extraDAYS}days" +%d)
                globalMONTH=$(date -d "+${extraDAYS}days" +%m)
                globalYEAR=$(date -d "+${extraDAYS}days" +%y)
                taskDAY="$globalDAY/$globalMONTH/$globalYEAR"
                break
            elif [[ $taskDAY = *"Day(s) from now"* ]];
            then
                if [[ $taskDAY = "$days Day(s) from now" ]];
                then
                    additionDAY=$(($days+$extraDAYS))
                    globalDAY=$(date -d "+${additionDAY}days" +%d)
                    globalMONTH=$(date -d "+${additionDAY}days" +%m)
                    globalYEAR=$(date -d "+${additionDAY}days" +%y)
                    taskDAY="$globalDAY/$globalMONTH/$globalYEAR"
                    break
                fi
            else
                dayVAR=$(echo $taskDAY   | awk -F'/' '{print $1}' )
                monthVAR=$(echo "$taskDAY" | awk -F'/' '{print $2}' )
                yearVAR=$(echo $taskDAY  | awk -F'/' '{print $3}' )
                globalDAY=$(date -d "${yearVAR}-${monthVAR}-${dayVAR}+${extraDAYS}days" +%d)
                globalMONTH=$(date -d "${yearVAR}-${monthVAR}-${dayVAR}+${extraDAYS}days" +%m)
                globalYEAR=$(date -d "$(date +%Y | cut -c1-2)${yearVAR}-${monthVAR}-${dayVAR}+${extraDAYS}days" +%y)
                taskDAY="$globalDAY/$globalMONTH/$globalYEAR"
                break
            fi
        done

        # Check if dayVAR, monthVAR and yearVAR are ALL declared
        if [[ -n ${dayVAR+x} && -n ${monthVAR+x} && -n ${yearVAR+x} ]];
        then
            if [[ $yearVAR -lt $todayYEAR || $yearVAR -gt 99 ]];
            then
                taskDAY="false"
            elif [[ $yearVAR == $todayYEAR ]];
            then
                isThisYEAR=1
                if [[ $monthVAR -lt $todayMONTH || $monthVAR -gt 12 ]];
                then
                    taskDAY="false"
                elif [[ $monthVAR == $todayMONTH ]];
                then
                    isThisMONTH=1
                    if [[ $dayVAR -lt $todayDAY ]];
                    then
                        taskDAY="false"
                    elif [[ ( $monthVAR == 2 && $dayVAR -gt 28 ) || ( $(($monthVAR%2)) == 1 && $dayVAR -gt 30 ) || $dayVAR -gt 31 ]];
                    then
                        taskDAY="false"
                    elif [[ $dayVAR == $todayDAY ]];
                    then
                        isThisDAY=1
                        if [[ $hourVAR -lt $todayHOUR ]];
                        then
                            taskHOURf
                            taskDAY="false"
                        elif [[ $hourVAR == $todayHOUR ]];
                        then
                            isThisHOUR=1
                            if [[ $isThisHOUR == 1 && $minVAR -lt $todayMIN ]];
                            then
                                taskHOURf
                                taskDAY="false"
                            fi
                        fi
                    fi
                fi
            fi
        fi
    done;
}

function taskHOURf {
    globalHOUR=0
    globalMIN=0
    taskHOUR="false"
    while [[ $taskHOUR = "false" ]];
    do
        taskHOUR=$(echo -e "${hourSTR}Input hour HH:MM e.g. 19:20" | $DpreCONFsb -sb ${colors[2]} -l 10 -p "Task Hour")
        for hours in ${premadeHOUR[@]};
        do
            if [[ $taskHOUR = *"Hour(s) from now"* ]];
            then
                if [[ $taskHOUR = "$hours Hour(s) from now" ]];
                then
                    if [[ $(($todayHOUR+$hours)) -gt 23 ]];
                    then
                        extraDAYS=$(($(date -d "+${hours}hours" +%_d)-${todayDAY}))
                        globalHOUR=$(date -d "+${hours}hours" +%H)
                        globalMIN=$(date -d "+${hours}hours" +%M)
                        taskHOUR="$globalHOUR:$globalMIN"
                        break
                    else
                        globalHOUR=$(($(date +%H)+${hours}))
                        globalMIN=$(date +%M)
                        taskHOUR="$globalHOUR:$globalMIN"
                        break
                    fi
                fi
            else
                hourVAR=$(echo $taskHOUR | awk -F':' '{print $1}' )
                minVAR=$(echo $taskHOUR | awk -F':' '{print $2}' )
            fi
        done
        if [[ -n ${hourVAR+x} && -n ${minVAR+x} ]];
        then
            if [[ $hourVAR -gt 23 || $minVAR -gt 59 ]];
            then
                taskHOUR="false"
            else
                globalHOUR=$hourVAR
                globalMIN=$minVAR
                taskHOUR="$hourVAR:$minVAR"
            fi
        fi
    done;
}

function createTASK {
    # function to create tasks
    taskTITLE=$(cat /dev/null | $DpreCONFsb -sb ${colors[0]} -p "Task Title" )
    taskDESCRIPTION=$(cat /dev/null | $DpreCONFsb -sb ${colors[1]} -p "Task Description" )
    taskHOURf
    taskDATEf
    echo "$taskTITLE|$taskDESCRIPTION|$taskHOUR|$taskDAY" >> $taskPATH;
}


function listTASK {
    selListCHOICE=$(cat $taskPATH | $DpreCONF -l 10 -p "Select Task" )
    itemSelNrLINE=$(cat -n $taskPATH | grep "$selListCHOICE" | awk '{print($1)}')
    itemSelNrLINE=$(echo $itemSelNrLINE | sed -r 's/ /\d;/g' )
    itemSelNrLINE+="d"
    modTASK=$(echo -e "Selected Task: $selListCHOICE\nFinish\nDelete" | $DpreCONF -l 3 -p "Modify Task" )
    case $modTASK in
        "");;
        "Finish")
            sed -i "$itemSelNrLINE" $taskPATH
            echo "$selListCHOICE" >> $ftaskPATH;;
        "Delete")
            sed -i "$itemSelNrLINE" $taskPATH;;
        *);;
    esac;
}

function initMENU {
    # Menu when initialized
    selMenuCHOICE=$(echo -e "Create New Task\nList Tasks" | $DpreCONF -l 2 -p "Start Menu")
    case $selMenuCHOICE in
        "");;
        "Create New Task")
            createTASK;;
        "List Tasks")
            listTASK;;
    esac;
}

case $1 in
    "")
        checkFILE;;
    create)
        createTASK;;
    menu)
        initMENU;;
esac

# Use cases
# If 0 tasks, prompt to create a new task

# TO-DO
# add the list, finish, delete and  functions
# Simple Task Manager: edit functionality
